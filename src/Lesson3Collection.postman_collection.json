{
	"info": {
		"_postman_id": "ee5b4950-57c6-46ce-ad27-a51d34da8295",
		"name": "Backend HW Goncharov",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29431294"
	},
	"item": [
		{
			"name": "lecture-3",
			"item": [
				{
					"name": "Creating a category E2E",
					"item": [
						{
							"name": "Creating a new admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(\"http://qa-school-test.quantori.academy/api/v1/session\", {\r",
											"    \"username\": \"Evgenii_admin\",\r",
											"    \"password\": \"StrongPassword123!\"\r",
											"}, function (err, response) {\r",
											"        pm.environment.set(\"basicAdminToken\", pm.response.JSON().accesseToken);\r",
											"});\r",
											"\r",
											"function generateRandomString(length) {\r",
											"  const charset = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?._\";\r",
											"  let result = '';\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * charset.length);\r",
											"    result += charset.charAt(randomIndex);\r",
											"  }\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const randomTitle = generateRandomString(10);\r",
											"pm.environment.set(\"generatedAdminPassword\", randomTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-114?atlOrigin=eyJpIjoiYjY0NzcwNjRmYzE3NDkxN2E0ODhkZDRmNjkyOGQ3YWEiLCJwIjoiaiJ9\r",
											"\r",
											"POST/register an admin returns incorrect role value (expected: 1)\r",
											"https://quantori.atlassian.net/browse/QS-110?atlOrigin=eyJpIjoiNDVkNDAzZTViMzA2NDAzOGE0NzBhODUzODMzZWViYzkiLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Admin successefully created. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains  id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains  a username field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('username');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains an email field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a firstName field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a lastName field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a role field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('role');\r",
											"});\r",
											"/*\r",
											"pm.test(\"Admin role value is 1\", function () {\r",
											"    pm.expect(pm.response.json().role).to.equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has an 'updatedAt' field\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.key('updatedAt');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has an 'createdAt' field\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.key('createdAt');\r",
											"});\r",
											"*/\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"AdminUserName\", pm.response.json().username);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{envAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomFirstName}}{{$randomFirstName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomJobArea}}{{$randomFirstName}}{{$randomFirstName}}@gmail.com\",\r\n    \"password\": \"{{generatedAdminPassword}}\",\r\n    \"role\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin in as admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Loggin in as an admin successefully. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has an admin accessToken\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('accessToken');\r",
											"});\r",
											"pm.environment.set(\"newAdminToken\", pm.response.json().accessToken);\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{AdminUserName}}\",\r\n    \"password\": \"{{generatedAdminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Host}}/api/v1/session",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test JWT Authentication as an admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"JWT authentication as an admin is success. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message contain 'Authentication passed!' confirmation message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Authentication passed!\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Host}}/api/v1/jwt",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"v1",
										"jwt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a new category as admin according requirements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-116?atlOrigin=eyJpIjoiZDljMDBkNWRhZGQ1NGE5MmJkMTRiZThjMWI5MDNmYjciLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Category is successfully created. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response cantains id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response cantains title field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('title');\r",
											"});\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"/*\r",
											"pm.test(\"Response cantains updatedAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('updatedAt');\r",
											"});\r",
											"pm.test(\"Response cantains createdAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('createdAt');\r",
											"});\r",
											"*/\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"categoryID\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomNoun}} {{$randomNoun}} {{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Сreated category is available by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-116?atlOrigin=eyJpIjoiZDljMDBkNWRhZGQ1NGE5MmJkMTRiZThjMWI5MDNmYjciLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Category is successfully created. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"id is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"    pm.expect(responseData.id).to.be.at.least(0, \"id should be a non-negative integer\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains title field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('title');\r",
											"});\r",
											"\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"/*\r",
											"pm.test(\"Response contains updatedAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('updatedAt');\r",
											"});\r",
											"pm.test(\"Response contains createdAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('createdAt');\r",
											"});\r",
											"*/\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Host}}/api/v1/categories/{{categoryID}}",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"v1",
										"categories",
										"{{categoryID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a new category with wrong input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Admin can't create new category with wrong input. Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message contain requirements to title field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Only RU/EN alphabet, space and digits allowed, please change your request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"  const charset = \"안녕하세요저는한국어를배우고있어요\";\r",
											"  let result = '';\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * charset.length);\r",
											"    result += charset.charAt(randomIndex);\r",
											"  }\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const randomTitle = generateRandomString(10);\r",
											"pm.environment.set(\"envGeneratedKorean\", randomTitle);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{envGeneratedKorean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Category with wrong input didn't added to the list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List doesn't contain category with wrong input\", function () {\r",
											"    pm.expect(pm.response.text()).not.include(\"새로운 코스\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Enrolling the course as a student E2E",
					"item": [
						{
							"name": "Creating a student",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"  const charset = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?._\";\r",
											"  let result = '';\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * charset.length);\r",
											"    result += charset.charAt(randomIndex);\r",
											"  }\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const randomTitle = generateRandomString(10);\r",
											"pm.collectionVariables.set(\"generatedStudentPassword\", randomTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-114?atlOrigin=eyJpIjoiYjY0NzcwNjRmYzE3NDkxN2E0ODhkZDRmNjkyOGQ3YWEiLCJwIjoiaiJ9\r",
											"\r",
											"POST/register a student returns incorrect role value (expected: 3)\r",
											"https://quantori.atlassian.net/browse/QS-111?atlOrigin=eyJpIjoiODY4NGM1MDNlYTI5NGYzNGI0NjMxNGFlNDM5OWRmYzMiLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Student successfully created. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a username field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('username');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains an email field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a firstName field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a lastName field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
											"});\r",
											"/*\r",
											"pm.test(\"Response has an 'updatedAt' field\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.key('updatedAt');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has an 'createdAt' field\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.key('createdAt');\r",
											"});\r",
											"*/\r",
											"pm.test(\"Response contains a role field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('role');\r",
											"});\r",
											"/*\r",
											"pm.test(\"Student role value is 3\", function () {\r",
											"    pm.expect(pm.response.json().role).to.equal(3);\r",
											"});\r",
											"*/\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"studentUserName\", pm.response.json().username);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomFirstName}}{{$randomLastName}}{{$randomLastName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomJobArea}}{{$randomLastName}}{{$randomLastName}}@gmail.com\",\r\n    \"password\": \"{{generatedStudentPassword}}\",\r\n    \"role\": \"student\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin in as a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Logging in as a student successfully. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a student accessToken\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('accessToken');\r",
											"});\r",
											"pm.collectionVariables.set(\"CollectionstudentToken\", pm.response.json().accessToken);\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"newStudentToken\", pm.response.json().accessToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{studentUserName}}\",\r\n    \"password\": \"{{generatedStudentPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test JWT Authentication as a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"JWT authentication as an admin is success. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message contain 'Authentication passed!' confirmation message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Authentication passed!\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Host}}/api/v1/jwt",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"v1",
										"jwt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting a list of courses as a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List of all courses is visible. Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains id field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('id');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains title field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('title');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains description field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('description');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains visible field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('visible');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains categoryId field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('categoryId');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains likes field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('likes');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains dislikes field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('dislikes');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"List contains created course\", function () {\r",
											"    var ID = pm.collectionVariables.get(\"courseIDforGET\");\r",
											"    pm.expect(pm.response.text()).to.include(ID);\r",
											"\r",
											"});\r",
											"\r",
											"var randomIndex = Math.floor(Math.random() * pm.response.json().length);\r",
											"    var randomId = pm.response.json()[randomIndex].id;\r",
											"    pm.environment.set(\"courseForEnrolling\", randomId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enrolling choosen course as a student",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Student was enrolled chosen course. Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Result message contains 'You've successfully enrolled the course'\", function () {\r",
											"    pm.expect(pm.response.json().result).to.include(\"You've successfully enrolled the course\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseForEnrolling}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseForEnrolling}}",
										"enroll"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking that choosen course was enrolled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in the array has a userId\", function () {\r",
											"    pm.response.json().forEach(function (item) {\r",
											"        pm.expect(item).to.have.property('userId');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element in the array has a courseId\", function () {\r",
											"    pm.response.json().forEach(function (item) {\r",
											"        pm.expect(item).to.have.property('courseId');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"List contains last enrolled course\", function () {\r",
											"    var ID = pm.environment.get(\"courseForEnrolling\");\r",
											"    pm.expect(pm.response.text()).to.include(ID);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/mine",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"mine"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enrolling already enrolled course",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Student can't enroll in the same course twice. Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Result message contains 'You've already enrolled to this course'\", function () {\r",
											"    pm.expect(pm.response.json().result).to.include(\"You've already enrolled to this course\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newStudentToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseForEnrolling}}/enroll",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseForEnrolling}}",
										"enroll"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Creating a new material as a teacher E2E",
					"item": [
						{
							"name": "Creating a new teacher",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"  const charset = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?._\";\r",
											"  let result = '';\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * charset.length);\r",
											"    result += charset.charAt(randomIndex);\r",
											"  }\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const randomTitle = generateRandomString(10);\r",
											"pm.environment.set(\"generatedTeacherPassword\", randomTitle);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-114?atlOrigin=eyJpIjoiYjY0NzcwNjRmYzE3NDkxN2E0ODhkZDRmNjkyOGQ3YWEiLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Teacher successfully created. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a username field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('username');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains an email field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('email');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a firstName field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('firstName');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains a lastName field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('lastName');\r",
											"});\r",
											"/*\r",
											"pm.test(\"Response has an 'updatedAt' field\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.key('updatedAt');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has an 'createdAt' field\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object').that.has.key('createdAt');\r",
											"});\r",
											"*/\r",
											"pm.test(\"Response contains a role field\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('role');\r",
											"});\r",
											"\r",
											"pm.test(\"Teacher role value is 2\", function () {\r",
											"    pm.expect(pm.response.json().role).to.equal(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"TeacherUserName\", pm.response.json().username);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomLastName}}{{$randomLastName}}{{$randomFirstName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomLastName}}{{$randomLastName}}{{$randomLastName}}@gmail.com\",\r\n    \"password\": \"{{generatedTeacherPassword}}\",\r\n    \"role\": \"teacher\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Loggin in as teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Logging in as a teacher successfully. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has a teacher accessToken\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('accessToken');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"newTeacherToken\", jsonData.accessToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{TeacherUserName}}\",\r\n    \"password\": \"{{generatedTeacherPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/session",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test JWT Authentication as a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"JWT authentication as a teacher is success. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message contain 'Authentication passed!' confirmation message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Authentication passed!\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{Host}}/api/v1/jwt",
									"host": [
										"{{Host}}"
									],
									"path": [
										"api",
										"v1",
										"jwt"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting a list of all categories as a teacher",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"List of all categories is visible. Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains id field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('id');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each element contains title field\", function () {\r",
											"    pm.response.json().forEach(function (course) {\r",
											"        pm.expect(course).to.have.property('title');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"var randomIndex = Math.floor(Math.random() * pm.response.json().length);\r",
											"    var randomId = pm.response.json()[randomIndex].id;\r",
											"    pm.environment.set(\"categoryForCreatingCourse\", randomId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/categories",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-150?atlOrigin=eyJpIjoiOTg1OGU2OGQxMWVjNDE0ZDkxYjlmOTNkYzJiN2JhN2EiLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Course is successfully created. Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains title field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('title');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains categoryId field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('categoryId');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains visible field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('visible');\r",
											"});\r",
											"/*\r",
											"pm.test(\"Response contains updatedAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('updatedAt');\r",
											"});\r",
											"pm.test(\"Response contains createdAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('createdAt');\r",
											"});*/\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"pm.environment.set(\"courseID\", pm.response.json().id);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomNoun}} {{$randomNoun}}\",\r\n    \"description\": \"{{$randomAdjective}} {{$randomAdjective}} {{$randomAdjective}} {{$randomAdjective}}\",\r\n    \"visible\": {{$randomBoolean}},\r\n    \"categoryId\": {{categoryForCreatingCourse}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking created course by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-150?atlOrigin=eyJpIjoiOTg1OGU2OGQxMWVjNDE0ZDkxYjlmOTNkYzJiN2JhN2EiLCJwIjoiaiJ9\r",
											"not all created courses are added to the course list\r",
											"https://quantori.atlassian.net/browse/QS-170?atlOrigin=eyJpIjoiNzdjZGJlODVlNTkxNDAxODlmNDA1MjQ3ZGFjN2FlODEiLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Information about specific course is visible. Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains title field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('title');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains categoryId field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('categoryId');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains description field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('description');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains visible field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('visible');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains likes field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('likes');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains dislikes field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('dislikes');\r",
											"});\r",
											"/*\r",
											"pm.test(\"Response contains updatedAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('updatedAt');\r",
											"});\r",
											"pm.test(\"Response contains createdAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('createdAt');\r",
											"});*/\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating a new course with invalid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Teacher can't create a course with invalid title. Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message contains requirements to title field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Minimum course title length is: 3\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateRandomString(length) {\r",
											"  const charset = \"абвгдежзиклмнопрстуфхцчшщ\";\r",
											"  let result = '';\r",
											"  for (let i = 0; i < length; i++) {\r",
											"    const randomIndex = Math.floor(Math.random() * charset.length);\r",
											"    result += charset.charAt(randomIndex);\r",
											"  }\r",
											"  return result;\r",
											"}\r",
											"\r",
											"const randomTitle = generateRandomString(2);\r",
											"pm.environment.set(\"envGeneratedRu2Let\", randomTitle);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{envGeneratedRu2Let}}\",\r\n    \"description\": \"{{$randomAdjective}} {{$randomAdjective}} {{$randomAdjective}} {{$randomAdjective}}\",\r\n    \"visible\": {{$randomBoolean}},\r\n    \"categoryId\": {{categoryForCreatingCourse}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking that wrong created course was not added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List doesn't contain category with wrong input\", function () {\r",
											"    pm.expect(pm.response.text()).not.include(pm.environment.get(\"envGeneratedRu2Let\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding new material to the course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.",
											"https://quantori.atlassian.net/browse/QS-150?atlOrigin=eyJpIjoiOTg1OGU2OGQxMWVjNDE0ZDkxYjlmOTNkYzJiN2JhN2EiLCJwIjoiaiJ9",
											"*/",
											"pm.environment.set(\"materialID\", pm.response.json().id);",
											"",
											"pm.test(\"New material was added to the course. Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has an id property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');",
											"});",
											"",
											"pm.test(\"Response has an title property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('title');",
											"});",
											"",
											"pm.test(\"Response has an data property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');",
											"});",
											"",
											"pm.test(\"Response has an order property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('order');",
											"});",
											"",
											"pm.test(\"Response has an courseId property\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('courseId');",
											"});",
											"/*",
											"pm.test(\"Response contains updatedAt field\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('updatedAt');",
											"});",
											"pm.test(\"Response contains createdAt field\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('createdAt');",
											"});",
											"*/",
											"pm.test(\"Response time is less than 3000 ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomAdjective}} {{$randomNoun}} {{$randomAlphaNumeric}}\",\r\n    \"data\": \"{{$randomNoun}} {{$randomNoun}} {{$randomNoun}} {{$randomNoun}} {{$randomNoun}}\",\r\n    \"order\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseID}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseID}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Getting material by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*Response body should have \"createdAt\" and \"updatedAt\" fields, but they are missing in the implementation.\r",
											"https://quantori.atlassian.net/browse/QS-150?atlOrigin=eyJpIjoiOTg1OGU2OGQxMWVjNDE0ZDkxYjlmOTNkYzJiN2JhN2EiLCJwIjoiaiJ9\r",
											"*/\r",
											"pm.test(\"Information about specific material is visible. Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains id field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains title field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('title');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains data field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains order field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('order');\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains courseId field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('courseId');\r",
											"});\r",
											"/*\r",
											"pm.test(\"Response contains updatedAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('updatedAt');\r",
											"});\r",
											"pm.test(\"Response contains createdAt field\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('createdAt');\r",
											"});*/\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseID}}/materials/{{materialID}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseID}}",
										"materials",
										"{{materialID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Adding material with invalid input data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Teacher can't add material with invalid title. Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message contains requirements to the title field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Minimum material title length is: 3\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 3000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEzODEsInJvbGVJZCI6MiwiaWF0IjoxNjkzODI1NzY3LCJleHAiOjE2OTM4MzI5Njd9.mW_sVByGIYc0VZr_o8E5QPIcYZoexq8B41WT4FfOZXo",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Ша\",\r\n    \"data\": \"{{$randomNoun}} {{$randomNoun}} {{$randomNoun}} {{$randomNoun}} {{$randomNoun}}\",\r\n    \"order\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseID}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseID}}",
										"materials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checking that wrong created material was not added",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"List doesn't contain category with wrong input\", function () {\r",
											"    pm.expect(pm.response.text()).not.include(\"Ша\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{newTeacherToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/v1/courses/{{courseID}}/materials",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"courses",
										"{{courseID}}",
										"materials"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://qa-school-test.quantori.academy",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": ""
		},
		{
			"key": "teacherToken",
			"value": ""
		},
		{
			"key": "studentToken",
			"value": ""
		},
		{
			"key": "generatedTitle",
			"value": ""
		},
		{
			"key": "courseID",
			"value": ""
		},
		{
			"key": "courseIDforDeleting",
			"value": ""
		},
		{
			"key": "courseIDforGET",
			"value": ""
		},
		{
			"key": "courseIDforChanging",
			"value": ""
		},
		{
			"key": "TeacherUserName",
			"value": ""
		},
		{
			"key": "studentUserName",
			"value": ""
		},
		{
			"key": "generatedTeacherPassword",
			"value": ""
		},
		{
			"key": "generatedStudentPassword",
			"value": ""
		},
		{
			"key": "courseForEnrolling",
			"value": ""
		},
		{
			"key": "generatedCollectionAdminPassword",
			"value": ""
		},
		{
			"key": "CollectionAdminUserName",
			"value": ""
		},
		{
			"key": "generatedCollectionTeacherPassword",
			"value": ""
		},
		{
			"key": "CollectionTeacherUserName",
			"value": ""
		},
		{
			"key": "generatedCollectionStudentPassword",
			"value": ""
		},
		{
			"key": "CollectionstudentUserName",
			"value": ""
		},
		{
			"key": "CollectionAdminToken",
			"value": ""
		},
		{
			"key": "CollectionteacherToken",
			"value": ""
		},
		{
			"key": "CollectionstudentToken",
			"value": ""
		},
		{
			"key": "categoryID",
			"value": ""
		},
		{
			"key": "generatedSpecialSymbols",
			"value": ""
		},
		{
			"key": "generatedKorean",
			"value": ""
		},
		{
			"key": "categoryIDforDeleting",
			"value": ""
		},
		{
			"key": "categoryIDForGet",
			"value": ""
		}
	]
}